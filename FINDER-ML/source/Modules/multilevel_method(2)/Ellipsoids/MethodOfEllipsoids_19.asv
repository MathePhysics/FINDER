function parameters = MethodOfEllipsoids_19(Datas, parameters, methods)

%x = ismember(parameters.multilevel.svmonly, [0,2]);
%x(2) = isempty(parameters.snapshots.k1);
%if ~x, return, end

if ~parameters.multilevel.chooseTrunc, return, end


%% Prep data
for C = 'AB'
    parameters.data.(C) = size(Datas.rawdata.([C 'Data']), 2);
end
%Datas = InScriptPrepData(Datas, parameters, methods);

parameters.data.i = 1;
parameters.data.j = 1;
Datas = methods.all.prepdata(Datas, parameters);


%Get a list of truncation parameters for class A
%Truncations = GetTruncations(parameters);
Truncations = GetTruncations(Datas, parameters, methods);



%Initialize Array of wrongly misplaced points
Record = Inf;
P = parameters.data.numofgene;
M = length(Truncations);
N = parameters.data.numofgene - min(Truncations);
WrongPoints = nan(max(Truncations),N);
WrongPoints2 = WrongPoints;
SepCrit = WrongPoints;

%Initialize Datas for Projection Onto AMA
parameters.snapshots.k1 = min(Truncations);



%parfor ima = Truncations(:)'
for ima = Truncations(:)'
    p2 = parameters;
    p2.snapshots.k1 = ima;
    D2 = ProjectOntoAMA(Datas, p2,methods);
    fprintf('Testing Truncation %d of %d \n', ima, max(Truncations));
    
%     D2 = Datas;
%     for C = 'AB', for set = ["CovTraining", "Machine", "Testing"]
%             D2.(C).(set) = Datas.(C).(set)(1:end-ima,:);
%     end, end

    D2 = ProjectOntoT(D2, p2, methods);
    %Mres = parameters.data.numofgene - ima;

    W = WrongPoints(ima,:);
    W2 = WrongPoints2(ima,:);
    SC = SepCrit(ima,:);

    

    NFeatures = size(D2.A.Machine,1);

    parfor imres = 1:NFeatures
    %for imres = 5:NFeatures %NFeatures:-1:1 %
        switch parameters.multilevel.eigentag
            case 'largest'
                iFeatures = (NFeatures - imres + 1):NFeatures;
            case 'smallest'
                iFeatures = 1:imres;
        end

        [W(imres), SC(imres)] = IdentifyMisplaced(D2, p2, iFeatures);
    end


    WrongPoints(ima,:) = W;
    %WrongPoints2(ima,:) = W2;
    SepCrit(ima,:) = SC;

%     if any(W == 0)
%         WrongPoints = WrongPoints(1:ima,:);
%         SepCrit = SepCrit(1:ima,:);
%         break
%     end

end
fprintf('\n');

parameters = plotHeatMap1(WrongPoints, SepCrit, parameters);
%plotHeatMap1(WrongPoints2, parameters);
%parameters = plotHeatMap2(SepCrit, parameters);



end

%==========================================================================
function Truncations = GetTruncations(Datas, parameters, methods)

parameters.snapshots.k1 = size(Datas.A.CovTraining, 2);

p = methods.Multi.snapshots(Datas.A.CovTraining, parameters, methods, parameters.snapshots.k1);

EV = cumsum(p.snapshots.eigenvalues) / sum(p.snapshots.eigenvalues);
%Truncations1 = find(EV < 0.95);
Truncations1 = find(EV < 0.95 & EV > 0.75);

EV2 = 1 - p.snapshots.eigenvalues / max(p.snapshots.eigenvalues);
Truncations2 = find(EV2 < 0.95);

%Truncations = intersect(Truncations1, Truncations2);
Truncations = Truncations1;

if isempty(Truncations)
    Truncations = 1:length(EV);
end

end
%==========================================================================


%==========================================================================
function [wrong, sc] = IdentifyMisplaced(Datas, parameters, iFeatures)

        nargoutchk(1,3);

        for C = 'AB', for set = ["Machine", "Testing"]
                Datas.(C).(set) = Datas.(C).(set)(iFeatures,:);
        end, end

        
        for C = 'AB' 
            NC = 1/ sqrt( size(Datas.(C).Machine,2) - 1);
            MC = mean(Datas.(C).Machine, 2);
            XC = NC * (Datas.(C).Machine - MC);

            [UC, SC] = mysvd(XC); %Get principal axes and semi-major axes

            E.(C).Kinv = (SC.^(-0.5) .* UC');
            YC = E.(C).Kinv * (Datas.(C).Machine - MC); %Transform into isotropic data

            

            rC = sum(YC.^2, 1);
  

            E.(C).radius = quantile(rC, parameters.multilevel.concentration);
            E.(C).center = MC;

            eigendata.(['Eval' C]) = SC;
            eigendata.(['Evec' C]) = UC;
        end 

        Y1 = E.B.Kinv*(Datas.A.Testing - E.B.center);
        Y2 = E.B.Kinv*(Datas.B.Testing - E.B.center);
        r1 = sum(Y1.^2,1); r2 = sum(Y2.^2,1);
        wrong = - mean( abs(r1 - r2) );

%         switch parameters.multilevel.eigentag
%             case 'largest'
%                 wrong = mean(r2 - r1);
%             case 'smallest'
%                 wrong = mean(r1 - r2);
%         end
        


       
       
          
                
            %actual = C == 'A';
            %wrong = wrong + sum(predicted ~= actual);
       
        
        
        
        %subplot(2,1,1), legend(legstr, 'Location', 'westoutside'); 
        
        %subplot(2,1,2), legend(legstr, 'Location', 'westoutside'); 
        %legend({'A', 'B'}, 'Location', 'westoutside');
        %fplot(@(x) norm(E.A.Kinv*E.A.center)^2, 'LineStyle', '--', 'LineWidth', 2)
        %fplot(@(x) norm(E.B.Kinv*E.B.center)^2, 'LineStyle', '--', 'LineWidth', 2)
        %legend({'A', 'B', 'mean A', 'mean B'}, 'Location', 'northoutside'); 
    
       
        [~,sc,~,~] = ComputeSeparationCriterion(eigendata);


end
%==========================================================================

%==========================================================================
function parameters = plotHeatMap1(WrongPoints, SepCrit, parameters)

mysurf = @(x) surf(x, 'EdgeColor','none','FaceAlpha',0.7);
myimagesc = @(x) imagesc(x, 'FaceAlpha', 0.7);
allMres = [];

%Plot Heat Map corresponding to the number of misplaced points for each MA,
%Mres
figure('Name', 'In Wrong Ellipsoid'), 
% h = imagesc(WrongPoints); 
% h.AlphaData = ~isnan(WrongPoints);
h = mysurf(WrongPoints);
J = jet; 
colormap(J), colorbar
xlabel('Mres'), ylabel('MA')



%Obtain Best Truncation MA 
[RecordWP, imin] = min(WrongPoints, [], 'all');
[BestMA,~] = ind2sub(size(WrongPoints), imin);
title(sprintf('Best Overall MA = %d,\n Misclassification Rate = %d', BestMA, RecordWP))

%i = ind2sub(size(WrongPoints), i);
[MA, Mres] = find(WrongPoints == RecordWP);
MA = unique(MA);
allMres = [allMres, max(Mres)];

SepCrit2 = SepCrit(MA,:);

[RecordSepCrit, imin] = min(SepCrit2, [], 'all');
[BestMA, BestMres] = ind2sub(size(SepCrit), imin);

SC = SepCrit(BestMA,:);
figure('Name', 'Best Separation Criterion')
plot(SC, 'LineWidth', 3), hold on
scatter(BestMres, SC(BestMres), 40, 'r', 'filled')
%ylim([0,100])
title(sprintf('Min SC: %0.3e,\n MA = %d, Mres = %d', RecordSepCrit, BestMA, BestMres))
allMres = [allMres, BestMres];


figure('Name', 'Separation Criterion')
mysurf(SepCrit)
xlabel('Mres'), ylabel('MA')
%zlim([0,100])
title('Separation Criterion')


parameters.snapshots.k1 = BestMA;
allMres = [parameters.multilevel.Mres(:)', allMres(:)', parameters.data.numofgene - BestMA];
parameters.multilevel.Mres = sort(unique(allMres));

end
%==========================================================================

%==========================================================================
function parameters = plotHeatMap2(SepCrit, parameters)
%Plot Heat Map corresponding to the number of misplaced points for each MA,
%Mres
figure('Name', 'Separation Criterion'), 
h = imagesc(SepCrit); 
J = jet; 
colormap(J), colorbar
xlabel('Mres'), ylabel('MA')
h.AlphaData = ~isnan(SepCrit);


%Obtain Best Mres

% WP = WrongPoints(parameters.snapshots.k1,:);
% [Record] = min(WP);
% Mres = find(WP == Record);
%SC = SepCrit(parameters.snapshots.k1, Mres);
SC = SepCrit(parameters.snapshots.k1,:);

[m, imin] = min(SC);
%imres = Mres(imin);
figure('Name', 'Separation Criterion 2')
%plot(SepCrit(parameters.snapshots.k1,:), 'LineWidth', 3);
plot(SC, 'LineWidth', 3);
hold on
scatter(imin, m, 50, 'r', 'filled');
title(sprintf('Mres = %d', imin));

Mres = [parameters.multilevel.Mres,...
    imin,...
    parameters.data.numofgene - parameters.snapshots.k1];


parameters.multilevel.Mres = sort(unique(Mres));
end
%==========================================================================